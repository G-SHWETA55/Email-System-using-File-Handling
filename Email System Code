import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * Model class representing an Email object with sender, receiver, subject,
 * message, and timestamp fields.
 */
class Email {
    String sender;
    String receiver;
    String subject;
    String message;
    String timestamp;

    public Email(String sender, String receiver, String subject, String message) {
        this.sender = sender;
        this.receiver = receiver;
        this.subject = subject;
        this.message = message;
        this.timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }

    // Converts Email object to a single-line string for storage
    @Override
    public String toString() {
        return sender + "|" + receiver + "|" + subject + "|" + message + "|" + timestamp;
    }

    // Reconstructs Email object from stored line
    public static Email fromString(String data) {
        String[] parts = data.split("\\|");
        return new Email(parts[0], parts[1], parts[2], parts[3]);
    }

    // Displays email in readable format
    public void display() {
        System.out.println("From    : " + sender);
        System.out.println("To      : " + receiver);
        System.out.println("Subject : " + subject);
        System.out.println("Message : " + message);
        System.out.println("Time    : " + timestamp);
        System.out.println("--------------------------------------------------");
    }
}

/**
 * DAO class for handling Email CRUD operations using file handling.
 */
class EmailDAO {
    private final String SENT_FILE = "sent.txt";
    private final String INBOX_FILE = "inbox.txt";

    // Sends email: stores in both sent.txt and inbox.txt
    public void sendEmail(Email email) {
        writeToFile(SENT_FILE, email.toString());
        writeToFile(INBOX_FILE, email.toString());
    }

    // Displays all sent emails by a particular sender
    public void viewSent(String sender) {
        System.out.println("----- Sent Emails -----");
        readFromFile(SENT_FILE, sender, true);
    }

    // Displays inbox (received emails) for a receiver
    public void viewInbox(String receiver) {
        System.out.println("----- Inbox -----");
        readFromFile(INBOX_FILE, receiver, false);
    }

    // Deletes a sent email matching subject and sender
    public void deleteSent(String sender, String subject) {
        deleteFromFile(SENT_FILE, sender, subject);
    }

    // Writes a line to the given file
    private void writeToFile(String fileName, String content) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName, true))) {
            bw.write(content);
            bw.newLine();
        } catch (IOException e) {
            System.out.println("Error writing to file: " + fileName);
        }
    }

    // Reads and displays emails from file based on sender/receiver
    private void readFromFile(String fileName, String user, boolean isSender) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            boolean found = false;
            while ((line = br.readLine()) != null) {
                Email email = Email.fromString(line);
                if ((isSender && email.sender.equals(user)) || (!isSender && email.receiver.equals(user))) {
                    email.display();
                    found = true;
                }
            }
            if (!found) {
                System.out.println("No emails found.");
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + fileName);
        }
    }

    // Deletes matching entry from file and updates original
    private void deleteFromFile(String fileName, String user, String subject) {
        File inputFile = new File(fileName);
        File tempFile = new File("temp.txt");

        boolean deleted = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                Email email = Email.fromString(line);
                if (email.sender.equals(user) && email.subject.equalsIgnoreCase(subject)) {
                    deleted = true;
                    continue; // Skip this line
                }
                writer.write(line);
                writer.newLine();
            }

            if (deleted) {
                System.out.println("Email deleted successfully.");
            } else {
                System.out.println("Email not found.");
            }

        } catch (IOException e) {
            System.out.println("Error deleting from file.");
        }

        // Replace old file with updated file
        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating file after deletion.");
        }
    }
}

/**
 * Main class providing Console UI to interact with the Email System.
 */
public class EmailSystemApp {
    static Scanner scanner = new Scanner(System.in);
    static EmailDAO emailDAO = new EmailDAO();

    public static void main(String[] args) {
        System.out.println("===== Welcome to Console Email System =====");
        while (true) {
            // Display main menu
            System.out.println("\n1. Compose Email");
            System.out.println("2. View Inbox");
            System.out.println("3. View Sent Emails");
            System.out.println("4. Delete Sent Email");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());

                switch (choice) {
                    case 1:
                        composeEmail();
                        break;
                    case 2:
                        viewInbox();
                        break;
                    case 3:
                        viewSent();
                        break;
                    case 4:
                        deleteSentEmail();
                        break;
                    case 5:
                        System.out.println("Exiting... Thank you!");
                        return;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid number.");
            }
        }
    }

    // Method to compose and send an email
    private static void composeEmail() {
        System.out.print("Enter Sender Name   : ");
        String sender = scanner.nextLine();
        System.out.print("Enter Receiver Name : ");
        String receiver = scanner.nextLine();
        System.out.print("Enter Subject       : ");
        String subject = scanner.nextLine();
        System.out.print("Enter Message       : ");
        String message = scanner.nextLine();

        Email email = new Email(sender, receiver, subject, message);
        emailDAO.sendEmail(email);
        System.out.println("Email sent successfully!");
    }

    // View inbox for a specific receiver
    private static void viewInbox() {
        System.out.print("Enter your receiver name to view inbox: ");
        String receiver = scanner.nextLine();
        emailDAO.viewInbox(receiver);
    }

    // View sent emails for a specific sender
    private static void viewSent() {
        System.out.print("Enter your sender name to view sent emails: ");
        String sender = scanner.nextLine();
        emailDAO.viewSent(sender);
    }

    // Delete a sent email based on subject
    private static void deleteSentEmail() {
        System.out.print("Enter your sender name       : ");
        String sender = scanner.nextLine();
        System.out.print("Enter subject of email to delete: ");
        String subject = scanner.nextLine();
        emailDAO.deleteSent(sender, subject);
    }
}
