//Email DAO Class
class EmailDAO {
    private final String SENT_FILE = "sent.txt";
    private final String INBOX_FILE = "inbox.txt";

    // Sends email: stores in both sent.txt and inbox.txt
    public void sendEmail(Email email) {
        writeToFile(SENT_FILE, email.toString());
        writeToFile(INBOX_FILE, email.toString());
    }

    // Displays all sent emails by a particular sender
    public void viewSent(String sender) {
        System.out.println("----- Sent Emails -----");
        readFromFile(SENT_FILE, sender, true);
    }

    // Displays inbox (received emails) for a receiver
    public void viewInbox(String receiver) {
        System.out.println("----- Inbox -----");
        readFromFile(INBOX_FILE, receiver, false);
    }

    // Deletes a sent email matching subject and sender
    public void deleteSent(String sender, String subject) {
        deleteFromFile(SENT_FILE, sender, subject);
    }

    // Writes a line to the given file
    private void writeToFile(String fileName, String content) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName, true))) {
            bw.write(content);
            bw.newLine();
        } catch (IOException e) {
            System.out.println("Error writing to file: " + fileName);
        }
    }

    // Reads and displays emails from file based on sender/receiver
    private void readFromFile(String fileName, String user, boolean isSender) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            boolean found = false;
            while ((line = br.readLine()) != null) {
                Email email = Email.fromString(line);
                if ((isSender && email.sender.equals(user)) || (!isSender && email.receiver.equals(user))) {
                    email.display();
                    found = true;
                }
            }
            if (!found) {
                System.out.println("No emails found.");
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + fileName);
        }
    }

    // Deletes matching entry from file and updates original
    private void deleteFromFile(String fileName, String user, String subject) {
        File inputFile = new File(fileName);
        File tempFile = new File("temp.txt");

        boolean deleted = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                Email email = Email.fromString(line);
                if (email.sender.equals(user) && email.subject.equalsIgnoreCase(subject)) {
                    deleted = true;
                    continue; // Skip this line
                }
                writer.write(line);
                writer.newLine();
            }

            if (deleted) {
                System.out.println("Email deleted successfully.");
            } else {
                System.out.println("Email not found.");
            }

        } catch (IOException e) {
            System.out.println("Error deleting from file.");
        }

        // Replace old file with updated file
        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating file after deletion.");
        }
    }
}